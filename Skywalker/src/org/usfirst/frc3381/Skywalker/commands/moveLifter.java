// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3381.Skywalker.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.Skywalker.Robot;

/**
 *
 */
public class moveLifter extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	boolean canArmAngle;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public moveLifter() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.lifterArm);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		canArmAngle = false;
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
	/*	Robot.lifterArm.extendArm(Robot.oi.coDriver.getRawAxis(1) / 1.5);
		Robot.lifterArm.tiltArm(Robot.oi.coDriver.getRawAxis(5) / 1.5);
		*/
		double stick5 = Robot.oi.coDriver.getRawAxis(5);
		double stick1 = Robot.oi.coDriver.getRawAxis(1);
		boolean buttonLB = Robot.oi.coDriver.getRawButton(5);
		double currentArmAngle = Robot.lifterArm.getArmAngle();
		double currentLength = Robot.lifterArm.getArmLength();
		double innerLimit = 45.5;
		double outerLimit = Math.cos(currentArmAngle) * 50;
		double upperLimit = (2 * Math.PI)/3;
		double lowerLimit = 0;
		double hightLimit = Math.sin(currentArmAngle) * 13;
		
		//------------------------
		//		Angle Limits
		//------------------------
		if (stick5 > 0 && currentArmAngle < upperLimit && canArmAngle) {
			Robot.lifterArm.tiltArm(stick5);
		}
		else if (stick5 > 0 && currentArmAngle > lowerLimit && canArmAngle) {
			Robot.lifterArm.tiltArm(stick5);
		}
		else {
			Robot.lifterArm.tiltArm(stick5);
		}
		//--------------------------
		//		Length Limits
		//--------------------------
		
		if (stick1 > 0 && currentLength < outerLimit  && currentLength < hightLimit) {
			Robot.lifterArm.extendArm(stick1);
		}
		else if (stick1 < 0 && currentLength > innerLimit) {
			Robot.lifterArm.extendArm(stick1);
		}
		else if (buttonLB && currentLength > innerLimit) {
			Robot.lifterArm.extendArm(-.75);
		}
		else {
			Robot.lifterArm.extendArm(0);
		}
		//----------------------------
		//		Angle Enable
		//----------------------------
		
		if (buttonLB && currentLength <= innerLimit) {
			canArmAngle = true;
		}
		else {
			canArmAngle = false;
		}
		
		SmartDashboard.putNumber("Angle Encoder", Robot.lifterArm.getArmAngle());
		SmartDashboard.putNumber("Extention Encoder", Robot.lifterArm.getArmLength());
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.lifterArm.extendArm(0);
		Robot.lifterArm.tiltArm(0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
