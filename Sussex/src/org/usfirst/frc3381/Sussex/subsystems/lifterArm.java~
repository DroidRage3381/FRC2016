// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.Sussex.subsystems;

import org.usfirst.frc3381.Sussex.RobotMap;
import org.usfirst.frc3381.Sussex.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class lifterArm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon tiltMotorC1 = RobotMap.lifterArmtiltMotorC1;
    private final CANTalon tiltMotorC2 = RobotMap.lifterArmtiltMotorC2;
    private final SpeedController extendMotor4 = RobotMap.lifterArmextendMotor4;
    private final SpeedController extendMotor5 = RobotMap.lifterArmextendMotor5;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void extendLifterArm(double speed){
    	extendMotor4.set(speed);
    	extendMotor5.set(-speed);
    }
    
    public void angleLifterArm(double speed){
    	if (speed > 0.20){
    		speed = 0.20;
    	}
    	tiltMotorC1.set(speed);
    	tiltMotorC2.set(-speed);
    }
    
    public double getEncoder(){
    	double c1Encoder, c2Encoder, averageEncoder;
    	c1Encoder = tiltMotorC1.getEncPosition();
    	c2Encoder = tiltMotorC2.getEncPosition();
    	averageEncoder = (c1Encoder + c2Encoder)/2;
    	return averageEncoder;
    }
    /* This needs activation after sensor is added 2/20/16
    public double extentionEncoder(){
    	return extentionEncoder.getPosition();
    }
    */
}

