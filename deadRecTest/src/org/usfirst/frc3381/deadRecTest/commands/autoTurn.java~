// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3381.deadRecTest.commands;



import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3381.deadRecTest.Robot;
import org.usfirst.frc3381.deadRecTest.RobotMap;

import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class autoTurn extends PIDCommand {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	double turnRobot;
	Preferences pref = Robot.pref; 
	//AHRS ahrs = Robot.ahrs;
	double currentTurnRate; 
	double kP = .001, kI = 0.0, kD = 0.0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public autoTurn() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("autoTurn", 0.01, 0.0, 0.0, 0.02);
        getPIDController().setContinuous(true);
        getPIDController().setAbsoluteTolerance(0.2);
        getPIDController().setInputRange(0.0, 360.0);
        getPIDController().setOutputRange(-0.6, 0.6);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
/*
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return RobotMap.driveSystemrightSideEncode.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
         */
    	return Robot.ahrs.getYaw();
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

  /*      // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        RobotMap.driveSystemright2.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        RobotMap.driveSystemright3.pidWrite(output);
        */
    	currentTurnRate = output;
    	DriverStation.reportError("Current PIDOutput: "+ output, false);
    } 

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.resetEncoders();
    	turnRobot = pref.getDouble("turnRobot", 90);
    	getPIDController().setSetpoint(turnRobot);
    	//getPIDController().setContinuous(true);
    	getPIDController().setAbsoluteTolerance(1.0);
    	getPIDController().setInputRange(0, 360);
        getPIDController().setOutputRange(-0.6, 0.6);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.driveSystem.driveDistanceSpeed(0, currentTurnRate);
    	SmartDashboard.putNumber("Current Turn Rate", currentTurnRate);
    	SmartDashboard.putNumber("Current Rotation", Robot.ahrs.getYaw());
    	SmartDashboard.putNumber("Current turnRobot Value", turnRobot);
    	SmartDashboard.putNumber("Current Turn Error", getPIDController().getError());
    	
    	kP = pref.getDouble("P", .001);
    	kI = pref.getDouble("I", 0.0);
    	kD = pref.getDouble("D", 0.0);
    	getPIDController().setPID(kP, kI, kD);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
		return getPIDController().onTarget();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.resetEncoders();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
